/* App.svelte generated by Svelte v3.42.5 */
import {
	SvelteComponent,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_if_block_1(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Log out";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*toggle*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (16:0) {#if !user.loggedIn}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Log in";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*toggle*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let h1;
	let t2;
	let if_block1_anchor;
	let if_block0 = /*user*/ ctx[0].loggedIn && create_if_block_1(ctx);
	let if_block1 = !/*user*/ ctx[0].loggedIn && create_if_block(ctx);

	return {
		//Create
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			h1 = element("h1");
			h1.textContent = "Bruh";
			t2 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		//Mount
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			insert(target, t0, anchor);
			insert(target, h1, anchor);
			insert(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},
		// Update
		p(ctx, [dirty]) {
			if (/*user*/ ctx[0].loggedIn) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*user*/ ctx[0].loggedIn) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		//Destroy
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (detaching) detach(t0);
			if (detaching) detach(h1);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let user = { loggedIn: false };

	function toggle() {
		$$invalidate(0, user.loggedIn = !user.loggedIn, user);
	}

	return [user, toggle];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;